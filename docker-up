#!/usr/bin/env bash

# Vars
UBUNTU_VERSION=$(<ubuntu-version)
if [ -f "override-ubuntu-version" ]; then
    UBUNTU_VERSION=$(<override-ubuntu-version)
fi

# Config Files

## DockerFile-Template -> Dockerfile-Computed if does not exist
if [ ! -f Dockerfile-Computed ]; then
    cp Dockerfile-Template Dockerfile-Computed
fi

## docker-compose-template.yml -> docker-compose-computed.yml if does not exist
if [ ! -f docker-compose-computed.yml ]; then
    cp docker-compose-template.yml docker-compose-computed.yml
fi

## Replace "FROM ubuntu:xx.xx" with FROM ubuntu:$UBUNTU_VERSION in Dockerfile-Computed where each x is any single digit
sed -i '' "s/FROM ubuntu:[1-9][0-9]\.[0-9][0-9]/FROM ubuntu:$UBUNTU_VERSION/g" Dockerfile-Computed


# if pre-run does not exist, then copy the default
if [ ! -f pre-run/pre-run ]; then
    cp pre-run/pre-run-default pre-run/pre-run
fi

H=$(sed -e 's#.*\-h=\([^[:space:]]*\?\).*#\1#' <<< "$*")
C=$(sed -e 's#.*\-c=\([^[:space:]]*\?\).*#\1#' <<< "$*")
D=$(sed -e 's#.*\-d=\([^[:space:]]*\?\).*#\1#' <<< "$*")

if [ "$H" == "-h" ]; then
    printf "Use -c to specify building with no-cache eg. -c=true; default is false\n"
    printf "Use -d to specify building with no-cache & verbosely eg. -d=true; default is false\n"
    exit 1;
fi

# if -c=true, then build with no-cache
if [ "$C" == "-c=true" ]; then
    printf "============ Docker Build - with forcing re-cache\n"
    docker-compose -p "dockerlocal3090" -f docker-compose-computed.yml build --no-cache
elif [ "$D" == "-d=true" ]; then
    printf "============ Docker Pull\n"
    docker-compose -p "dockerlocal3090" -f docker-compose-computed.yml build --no-cache --progress=plain
fi

printf "============ Docker Build\n"
docker-compose -p "dockerlocal3090" -f docker-compose-computed.yml up --build -d

status=$?
if [ $status -eq 0 ]; then
    printf "============= ‚úÖ Docker is running!\n"
    printf "============= ‚ÑπÔ∏è This simple docker does not have a webserver, but if you did install & configure one, you'd see your site here: http://localhost:3090\n"
    printf "============= üëâ If you want to SSH: "
    echo  "./docker-ssh" | sed -e "s/.*/"$'\e[32m'"&"$'\e[m'"/"
    printf "\n"

    # prompt the user to select a post action
    printf "\n============ POST-ACTION: \n"
    printf "1. Run a script\n"
    printf "2. SSH\n"
    printf "3. View logs\n"
    printf "4. Create a script\n"
    read -p "Enter the number of the post action you want to perform (ctrl+d to exit): " -r
    echo

    if [[ $REPLY =~ ^[1-4]$ ]]; then
        case $REPLY in
            1)
                # Scan the /scripts/ directory for folders starting with "server-"
                # and prompt the user to select one
                # so that a scripts/server-<server-name> would be an option 1. <server-name>
                # and then run ./docker-run -n <server-name>
                SCRIPTS=$(find scripts/ -maxdepth 1 -type d -name "server-*" -exec basename {} \;)
                SCRIPTS_ARRAY=($SCRIPTS)
                SCRIPTS_ARRAY_LENGTH=${#SCRIPTS_ARRAY[@]}
                if [ $SCRIPTS_ARRAY_LENGTH -gt 0 ]; then
                    printf "\n============ SELECT SCRIPT: \n"
                    for (( i=0; i<${SCRIPTS_ARRAY_LENGTH}; i++ ));
                    do
                        printf "$((i+1)). ${SCRIPTS_ARRAY[$i]}\n"
                    done
                    printf "\n"
                    read -p "Enter the number of the script you want to run: " -r
                    echo
                    if [[ $REPLY =~ ^[0-9]+$ ]]
                    then
                        if [ $REPLY -gt 0 ] && [ $REPLY -le $SCRIPTS_ARRAY_LENGTH ]; then
                            # GET SCRIPT NAME FROM ARRAY
                            INDEX=$((REPLY-1))
                            SCRIPT_NAME=${SCRIPTS_ARRAY[$INDEX]}
                            printf "============= üèÉ‚Äç‚ôÄÔ∏è Running script: $SCRIPT_NAME\n"
                            # remove the "server-" prefix
                            SCRIPT_NAME=${SCRIPT_NAME:7}
                            ./docker-run -n $SCRIPT_NAME
                        else
                            printf "============= ‚ùå Invalid number.\n"
                        fi
                    else
                        printf "============= ‚ùå Invalid number.\n"
                    fi
                else
                    printf "============= ‚ùå No scripts found.\n"
                fi
                ;;
            2)
                printf "============= üëâ SSH: "
                echo  "./docker-ssh" | sed -e "s/.*/"$'\e[32m'"&"$'\e[m'"/"
                printf "\n"
                ./docker-ssh
                ;;
            3)
                printf "============ VIEW LOGS: \n"
                echo "ÔøΩ ./docker-log" | sed -e "s/.*/"$'\e[32m'"&"$'\e[m'"/"
                printf "\n"
                ./docker-log
                ;;
            4)
                printf "============ CREATE SCRIPT: \n"
                echo "üî® ./docker-script -n <script-name>" | sed -e "s/.*/"$'\e[32m'"&"$'\e[m'"/"
                read -p "Enter the script name: " -r
                echo
                ./docker-script -n $REPLY
                ;;
        esac
    else
        printf "============= ‚ùå Invalid number.\n"
    fi
else
    printf "============= ‚ùå Docker failed to build.\n"
fi
