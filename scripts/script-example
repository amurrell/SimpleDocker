#!/usr/bin/env bash

set -e

# change CUSTOM_SCRIPTS_PATH to match server name - should be only real difference in script
CUSTOM_SCRIPTS_PATH="/root/<devops-repo>/install-scripts/<specific-server>"
PHP_VERSION='8.0'
OWNER_USER='ubuntu'
DAEMON_USER="www-data"
DAEMON_GROUP="www-data"
SCRIPT_USER='root'
DEVOPS_DESTINATION="/root"
DEVOPS_REPOSITORY_URL="git@github.com:<company>/<devops-repo>.git"
# populate these variables
DEVOPS_DEPLOY_KEY_PUBLIC="<your public key here>"
DEVOPS_DEPLOY_KEY_PRIVATE="<your private key here>"


# Send stdout and stderr to both console and log file
>/var/www/simple-docker/scripts/<script-log-example>.log
exec >  >(tee -a /var/www/simple-docker/scripts/<script-log-example>.log)
exec 2> >(tee -a /var/www/simple-docker/scripts/<script-log-example>.log >&2)

# Setup the deploy keys for devops repo
printf "============ Setup deploy keys\n"
echo "$DEVOPS_DEPLOY_KEY_PUBLIC" > ~/.ssh/id_rsa.pub
echo "-----BEGIN RSA PRIVATE KEY-----" >> ~/.ssh/id_rsa
echo "$DEVOPS_DEPLOY_KEY_PRIVATE" >> ~/.ssh/id_rsa
echo "-----END RSA PRIVATE KEY-----" >> ~/.ssh/id_rsa

# Test the devops private key
printf "============ Test Devops Deploy Key\n"
cat ~/.ssh/id_rsa.pub 

# Fix Permissions on ssh keys
printf "============ Fix permissions on ssh keys\n"
chmod u=rw,go= ~/.ssh/id_rsa ~/.ssh/id_rsa.pub

# Check if /var/www exists
printf "============ Check if /var/www/ exists - if not, create it\n"
if [ ! -d "/var/www" ]; then  
    sudo mkdir /var/www/
    sudo chown -R $OWNER_USER:$DAEMON_GROUP /var/www/
fi

printf "============ Changing directory to /var/www\n"
cd /var/www/

# Add Github to known hosts
printf "============ Add github known hosts\n"
ssh-keyscan github.com >> ~/.ssh/known_hosts

# Add ssh config file to instruct github to use identity files only and not ssh forwarded chain
printf "============ Add github known hosts\n"
echo -e "\nHost github.com\n\tIdentityFile ~/.ssh/id_rsa\n\tIdentitiesOnly yes" >> ~/.ssh/config

# Clone devops repo
printf "============ Clone Private DevOps Repo\n"
if [ ! "$DEVOPS_REPOSITORY_URL" == "" ]; then
    cd "$DEVOPS_DESTINATION"
    git clone "$DEVOPS_REPOSITORY_URL" 

    # Adjust the origin remote url repo for devops
    printf "============ Adjust devops repository origin remote url\n"
    cd /root/<devops-repo>
    git remote set-url origin git@<devops-repo>.github.com:<company>/<devops-repo>.git
fi;

# Copy the devops repo's ssh-conf
printf "============ Copy devops repo's ssh-conf\n"
cp /root/<devops-repo>/ssh-conf/config ~/.ssh/config
# do this again - since we just replaced it.
echo -e "\nHost github.com\n\tIdentityFile ~/.ssh/id_rsa\n\tIdentitiesOnly yes" >> ~/.ssh/config

# Fix issue with bash profile
printf "============ Fix issue with bash profile tty mesg n error\n"
sed -i -e 's/mesg n .*true/tty -s \&\& mesg n/g' /root/.profile

#### Need to run many things as an owner user (eg ubuntu) - so make sure we have one
printf "============ Checking for $OWNER_USER user\n"
if ! id -u "$OWNER_USER" >/dev/null 2>&1; then
    # Create the user
    printf "============ Creating $OWNER_USER user\n"
    adduser --disabled-password --gecos "" $OWNER_USER
    # Add the user to sudoers
    printf "============ Adding $OWNER_USER to sudoers\n"
    usermod -aG sudo $OWNER_USER
    # Making sure there's no password
    printf "============ Making sure $OWNER_USER has no password\n"
    passwd -d $OWNER_USER
    # Make sure the user has a home directory owned by the user
    printf "============ Making sure $OWNER_USER has a home directory owned by the user\n"
    chown -R $OWNER_USER:$OWNER_USER /home/$OWNER_USER
    # Make sure it has a .profile and .bashrc
    printf "============ Making sure $OWNER_USER has a .profile and .bashrc\n"
    touch /home/$OWNER_USER/.profile
    touch /home/$OWNER_USER/.bashrc
    # Make sure the user has a .ssh folder
    printf "============ Making sure $OWNER_USER has a .ssh folder\n"
    mkdir /home/$OWNER_USER/.ssh
fi

# Chown the /var/www folder to the DAEMON user
printf "============ Chown /var/www to $DAEMON_USER\n"
chown -R $DAEMON_USER:$DAEMON_USER /var/www

# Add the user to www-data group
printf "============ Adding $OWNER_USER to $DAEMON_GROUP group\n"
usermod -aG $DAEMON_GROUP $OWNER_USER

# Add the user to root group (useful for installing composer)
printf "============ Adding $OWNER_USER to $SCRIPT_USER group\n"
usermod -aG $SCRIPT_USER $OWNER_USER

# Chown LEMP Guide to OWNER_USER and DAEMON_GROUP
printf "============ Chown LEMP GUIDE to $OWNER_USER and $DAEMON_GROUP\n"
chown -R $OWNER_USER:$DAEMON_GROUP /var/www/LEMP-setup-guide

# Now we know we can safely sudo su from ubuntu, or su ubuntu when we need to.

# Install init scripts
printf "============ Copy Generic init scripts to $OWNER_USER home folder\n"
mkdir -p /home/$OWNER_USER/generic-init-scripts/
cp -r /root/<devops-repo>/install-scripts/*.sh /home/$OWNER_USER/generic-init-scripts/
chown -R $OWNER_USER:$OWNER_USER /home/$OWNER_USER/generic-init-scripts/

# Loop through all the scripts in the new generic-init-scripts folder
printf "============ Loop through all the scripts in the new generic-init-scripts folder\n"
WHERE="/home/$OWNER_USER/generic-init-scripts/*.sh"
for f in $WHERE; do  # or wget-*.sh instead of *.sh
  # if file name has string '-run-as-owner-user' in it, then run as owner user
  if [[ $f == *"-RAOU"* ]]; then
    printf "============ Run as $OWNER_USER: $f\n\n\n\n"
    su - $OWNER_USER -c "bash $f"
  else
    printf "============ Run as root: $f\n\n\n\n"
    bash "$f" -H  || break # if needed 
  fi
  
done

# Install custom scripts
# Use same approach as above to run as root or owner user
# run any other files that get put in this same folder.
# Copy the custom scripts to LEMP guide folder for custom scripts
printf "============ Copy Custom Scripts LEMP Guide folder for custom scripts\n"
LEMP_CUSTOM_FOLDER="/var/www/LEMP-setup-guide/install/components/custom/scripts"
find "$CUSTOM_SCRIPTS_PATH/" -type f | grep -i sh$ | sort | xargs -i cp {} $LEMP_CUSTOM_FOLDER
# Make sure these scripts are executable
printf "============ Make sure custom scripts are executable\n"
chmod +x "$LEMP_CUSTOM_FOLDER"

# Instead of calling the install script in the LEMP guide, we will call the custom scripts directly
# so that we can distinctively run them as root or owner user
printf "============ Loop through all the scripts in the LEMP custom scripts folder\n"
WHERE="$LEMP_CUSTOM_FOLDER/*.sh"
for f in $WHERE; do  # or wget-*.sh instead of *.sh
  # if file name has string '-run-as-owner-user' in it, then run as owner user
  if [[ $f == *"-RAOU"* ]]; then
    printf "============ Run as $OWNER_USER: $f\n\n\n\n"
    su - $OWNER_USER -c "bash $f"
  else
    printf "============ Run as root: $f\n\n\n\n"
    bash "$f" -H  || break # if needed 
  fi
done

# Go back to root
cd
